{
  "openapi": "3.0.0",
  "paths": {
    "/user/me": {
      "get": {
        "operationId": "getMe",
        "summary": "Get current user info",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMeRespDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["user"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/user/{id}": {
      "get": {
        "operationId": "getOneBaseUserControllerUserEntity",
        "summary": "Get users",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get one base response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["user"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/user": {
      "get": {
        "operationId": "getManyBaseUserControllerUserEntity",
        "summary": "Get users",
        "parameters": [
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "s",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "or",
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "sort",
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "limit",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "description": "Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get many base response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GetManyUserEntityResponseDto"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserEntity"
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["user"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/wrap-token": {
      "post": {
        "operationId": "createWrapTokenTransaction",
        "summary": "Creates wrap token transaction",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWrapTokenReqDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateWrapTokenRespDTO"
                }
              }
            }
          }
        },
        "tags": ["wrap-token"]
      }
    },
    "/wrap-token/transactions": {
      "get": {
        "operationId": "getUserTransactions",
        "summary": "Get all transactions by from address",
        "parameters": [
          {
            "name": "walletAddress",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserTransactionsRespDTO"
                }
              }
            }
          }
        },
        "tags": ["wrap-token"]
      }
    },
    "/wrap-token/params": {
      "get": {
        "operationId": "getWrapTokenParams",
        "summary": "Returns params for creating wrap token transaction",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWrapTokenParamsRespDTO"
                }
              }
            }
          }
        },
        "tags": ["wrap-token"]
      }
    },
    "/wrap-token/status": {
      "get": {
        "operationId": "getServiceStatus",
        "summary": "Returns current wrap token service status",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWrapTokenServiceStatusRespDTO"
                }
              }
            }
          }
        },
        "tags": ["wrap-token"]
      }
    },
    "/wrap-token/tokens-sent/{paymentId}": {
      "patch": {
        "operationId": "updateToTokensSent",
        "summary": "Update transaction status to tokens sent",
        "parameters": [
          {
            "name": "paymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateToTokensSentReqDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDTO"
                }
              }
            }
          }
        },
        "tags": ["wrap-token"]
      }
    },
    "/wrap-token-transactions/{id}": {
      "get": {
        "operationId": "getOneBaseWrapTokenTransactionControllerWrapTokenTransactionEntity",
        "summary": "Returns wrap token transaction",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get one base response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrapTokenTransactionEntity"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["wrap-token-transactions"],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "updateOneBaseWrapTokenTransactionControllerWrapTokenTransactionEntity",
        "summary": "Updates wrap token transaction",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WrapTokenTransactionEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrapTokenTransactionEntity"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["wrap-token-transactions"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/wrap-token-transactions": {
      "get": {
        "operationId": "getManyBaseWrapTokenTransactionControllerWrapTokenTransactionEntity",
        "summary": "Returns wrap token transactions",
        "parameters": [
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "s",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "or",
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "sort",
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "limit",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "description": "Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get many base response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GetManyWrapTokenTransactionEntityResponseDto"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/WrapTokenTransactionEntity"
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["wrap-token-transactions"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/wrap-token-transactions-m2m/tokens-received": {
      "patch": {
        "operationId": "updateToTokensReceived",
        "summary": "Update tokens received status with M2M authentication",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokensReceivedRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["wrap-token-transactions-m2m"],
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/wrap-token-transactions-m2m/tokens-received-processed": {
      "patch": {
        "operationId": "updateToTokensReceived_DELETE_DUBLICATE",
        "summary": "Update tokens received status with M2M authentication",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokensReceivedRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["wrap-token-transactions-m2m"],
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/wrap-token-transactions-m2m/creating-transaction": {
      "patch": {
        "operationId": "updateToCreatingTransaction",
        "summary": "Update to creating transaction status",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatingTransactionRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["wrap-token-transactions-m2m"],
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/wrap-token-transactions-m2m/transaction-created": {
      "patch": {
        "operationId": "updateToTransactionCreated",
        "summary": "Update to transaction created status",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionCreatedRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["wrap-token-transactions-m2m"],
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/wrap-token-transactions-m2m/set-error": {
      "patch": {
        "operationId": "setCurrentError",
        "summary": "Set error status with M2M authentication",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ErrorUpdateRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["wrap-token-transactions-m2m"],
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/wrap-token-transactions-m2m/executing-transaction": {
      "patch": {
        "operationId": "updateToExecutingTransaction",
        "summary": "Update to executing transaction status",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecutingTransactionRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["wrap-token-transactions-m2m"],
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/wrap-token-transactions-m2m/transaction-executed": {
      "patch": {
        "operationId": "updateToTransactionExecuted",
        "summary": "Update to transaction executed status",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionExecutedRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["wrap-token-transactions-m2m"],
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/wrap-token-transactions-m2m/{id}": {
      "get": {
        "operationId": "getOneBaseWrapTokenTransactionM2MControllerWrapTokenTransactionEntity",
        "summary": "This endpoint is protected by M2M authentication",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get one base response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WrapTokenTransactionEntity"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["wrap-token-transactions-m2m"],
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/wrap-token-transactions-m2m": {
      "get": {
        "operationId": "getManyBaseWrapTokenTransactionM2MControllerWrapTokenTransactionEntity",
        "summary": "This endpoint is protected by M2M authentication",
        "parameters": [
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "s",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "or",
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "sort",
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "limit",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "description": "Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get many base response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GetManyWrapTokenTransactionEntityResponseDto"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/WrapTokenTransactionEntity"
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["wrap-token-transactions-m2m"],
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/notifications/mint-high-transaction": {
      "post": {
        "operationId": "sendMintHighTransactionNotification",
        "summary": "Send mint high transaction notification",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MintHightTransactionReqDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["notifications"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/tokens-unwrapped/transactions": {
      "get": {
        "operationId": "getUserTransactions",
        "summary": "Get all unwrapped transactions by target Tari address",
        "parameters": [
          {
            "name": "tariAddress",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserUnwrappedTransactionsRespDTO"
                }
              }
            }
          }
        },
        "tags": ["tokens-unwrapped"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/tokens-unwrapped/approve/{id}": {
      "patch": {
        "operationId": "approveTransaction",
        "summary": "Approve unwrapped tokens transaction",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["tokens-unwrapped"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/tokens-unwrapped/{id}": {
      "get": {
        "operationId": "getOneBaseTokensUnwrappedControllerTokensUnwrappedEntity",
        "summary": "Returns unwrapped tokens transaction",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get one base response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokensUnwrappedEntity"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["tokens-unwrapped"],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "updateOneBaseTokensUnwrappedControllerTokensUnwrappedEntity",
        "summary": "Reset processor status",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokensUnwrappedEntity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokensUnwrappedEntity"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["tokens-unwrapped"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/tokens-unwrapped": {
      "get": {
        "operationId": "getManyBaseTokensUnwrappedControllerTokensUnwrappedEntity",
        "summary": "Returns unwrapped tokens transactions",
        "parameters": [
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "s",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "or",
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "sort",
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "limit",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "description": "Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get many base response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GetManyTokensUnwrappedEntityResponseDto"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TokensUnwrappedEntity"
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["tokens-unwrapped"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/settings": {
      "get": {
        "operationId": "getSettings",
        "summary": "Get application settings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsEntity"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["settings"],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "updateSettings",
        "summary": "Update application settings",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingReqDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["settings"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/mine-to-exchange/config": {
      "post": {
        "operationId": "config",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MineToExchangeConfigDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MineToExchangeConfigRespDTO"
                }
              }
            }
          }
        },
        "tags": ["mine-to-exchange"]
      }
    },
    "/mine-to-exchange/transactions": {
      "post": {
        "operationId": "createMiningTransactions",
        "summary": "Create mining transactions",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMiningTransactionsDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["mine-to-exchange"],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/tokens-unwrapped-m2m/awaiting-confirmation": {
      "patch": {
        "operationId": "updateToAwaitingConfirmation",
        "summary": "Update transaction to awaiting confirmation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTokensUnwrappedStatusDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["tokens-unwrapped-m2m"],
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/tokens-unwrapped-m2m/confirmed": {
      "patch": {
        "operationId": "updateToConfirmed",
        "summary": "Update transaction to confirmed",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTokensUnwrappedStatusDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["tokens-unwrapped-m2m"],
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/tokens-unwrapped-m2m/init-send-tokens": {
      "patch": {
        "operationId": "updateToInitSendTokens",
        "summary": "Update transaction to init send tokens",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTokensUnwrappedStatusDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["tokens-unwrapped-m2m"],
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/tokens-unwrapped-m2m/sending-tokens": {
      "patch": {
        "operationId": "updateToSendingTokens",
        "summary": "Update transaction to sending tokens",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSendingTokensDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["tokens-unwrapped-m2m"],
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/tokens-unwrapped-m2m/tokens-sent": {
      "patch": {
        "operationId": "updateToTokensSent",
        "summary": "Update transaction to tokens sent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateToTokensSentDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["tokens-unwrapped-m2m"],
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/tokens-unwrapped-m2m/set-error": {
      "patch": {
        "operationId": "setCurrentError",
        "summary": "Set error on unwrapped tokens transaction",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokensUnwrappedSetErrorDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["tokens-unwrapped-m2m"],
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/tokens-unwrapped-m2m/{id}": {
      "get": {
        "operationId": "getOneBaseTokensUnwrappedM2MControllerTokensUnwrappedEntity",
        "summary": "This endpoint is protected by M2M authentication",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get one base response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokensUnwrappedEntity"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["tokens-unwrapped-m2m"],
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ]
      }
    },
    "/tokens-unwrapped-m2m": {
      "get": {
        "operationId": "getManyBaseTokensUnwrappedM2MControllerTokensUnwrappedEntity",
        "summary": "This endpoint is protected by M2M authentication",
        "parameters": [
          {
            "name": "fields",
            "description": "Selects resource fields. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#select\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": false
          },
          {
            "name": "s",
            "description": "Adds search condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#search\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "description": "Adds filter condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#filter\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "or",
            "description": "Adds OR condition. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#or\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "sort",
            "description": "Adds sort by field. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#sort\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "join",
            "description": "Adds relational resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#join\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true
          },
          {
            "name": "limit",
            "description": "Limit amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#limit\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "description": "Offset amount of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#offset\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "description": "Page portion of resources. <a href=\"https://github.com/nestjsx/crud/wiki/Requests#page\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "cache",
            "description": "Reset cache (if was enabled). <a href=\"https://github.com/nestjsx/crud/wiki/Requests#cache\" target=\"_blank\">Docs</a>",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get many base response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/GetManyTokensUnwrappedEntityResponseDto"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TokensUnwrappedEntity"
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["tokens-unwrapped-m2m"],
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "WXTM-Bridge API",
    "description": "",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "in": "header",
        "type": "http"
      }
    },
    "schemas": {
      "GetMeRespDTO": {
        "type": "object",
        "properties": {
          "isAdmin": {
            "type": "boolean"
          }
        },
        "required": ["isAdmin"]
      },
      "GetManyUserEntityResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEntity"
            }
          },
          "count": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageCount": {
            "type": "number"
          }
        },
        "required": ["data", "count", "total", "page", "pageCount"]
      },
      "UserEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "auth0Id": {
            "type": "string"
          },
          "isAdmin": {
            "type": "boolean"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": ["id", "auth0Id", "isAdmin", "createdAt", "updatedAt"]
      },
      "CreateWrapTokenReqDTO": {
        "type": "object",
        "properties": {
          "debug": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "tokenAmount": {
            "type": "string"
          }
        },
        "required": ["from", "to", "tokenAmount"]
      },
      "CreateWrapTokenRespDTO": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string"
          }
        },
        "required": ["paymentId"]
      },
      "UserTransactionDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "SUCCESS",
              "TIMEOUT",
              "TOKENS_RECEIVED",
              "PROCESSING"
            ]
          },
          "destinationAddress": {
            "type": "string"
          },
          "tokenAmount": {
            "type": "string"
          },
          "paymentId": {
            "type": "string"
          },
          "amountAfterFee": {
            "type": "string"
          },
          "feeAmount": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "transactionHash": {
            "type": "string"
          }
        },
        "required": [
          "status",
          "destinationAddress",
          "tokenAmount",
          "paymentId",
          "amountAfterFee",
          "feeAmount",
          "createdAt"
        ]
      },
      "GetUserTransactionsRespDTO": {
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTransactionDTO"
            }
          }
        },
        "required": ["transactions"]
      },
      "GetWrapTokenParamsRespDTO": {
        "type": "object",
        "properties": {
          "coldWalletAddress": {
            "type": "string"
          },
          "wrapTokenFeePercentageBps": {
            "type": "number"
          }
        },
        "required": ["coldWalletAddress", "wrapTokenFeePercentageBps"]
      },
      "GetWrapTokenServiceStatusRespDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["online", "offline"]
          }
        },
        "required": ["status"]
      },
      "UpdateToTokensSentReqDTO": {
        "type": "object",
        "properties": {
          "debug": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "SuccessDTO": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        },
        "required": ["success"]
      },
      "GetManyWrapTokenTransactionEntityResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WrapTokenTransactionEntity"
            }
          },
          "count": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageCount": {
            "type": "number"
          }
        },
        "required": ["data", "count", "total", "page", "pageCount"]
      },
      "WrapTokenAuditEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "paymentId": {
            "type": "string"
          },
          "fromStatus": {
            "type": "string",
            "enum": [
              "created",
              "tokens_sent",
              "tokens_received",
              "replaced_by_aggregated",
              "tokens_received_with_mismatch",
              "creating_safe_transaction",
              "creating_safe_transaction_unprocessable",
              "safe_transaction_created",
              "executing_safe_transaction",
              "safe_transaction_unprocessable",
              "safe_transaction_executed",
              "timeout",
              "mining_tokens_received_below_min_amount",
              "mining_incorrect_payment_id",
              "mining_incorrect_payment_id_and_amount"
            ]
          },
          "toStatus": {
            "type": "string",
            "enum": [
              "created",
              "tokens_sent",
              "tokens_received",
              "replaced_by_aggregated",
              "tokens_received_with_mismatch",
              "creating_safe_transaction",
              "creating_safe_transaction_unprocessable",
              "safe_transaction_created",
              "executing_safe_transaction",
              "safe_transaction_unprocessable",
              "safe_transaction_executed",
              "timeout",
              "mining_tokens_received_below_min_amount",
              "mining_incorrect_payment_id",
              "mining_incorrect_payment_id_and_amount"
            ]
          },
          "note": {
            "type": "object"
          },
          "transaction": {
            "$ref": "#/components/schemas/WrapTokenTransactionEntity"
          },
          "transactionId": {
            "type": "number"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "paymentId",
          "transaction",
          "transactionId",
          "createdAt",
          "updatedAt"
        ]
      },
      "WrapTokenTransactionEntity": {
        "type": "object",
        "properties": {
          "error": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "default": []
          },
          "debug": {
            "type": "object",
            "nullable": true,
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "id": {
            "type": "number"
          },
          "paymentId": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "tokenAmount": {
            "type": "string"
          },
          "tokenAmountInWallet": {
            "type": "string"
          },
          "feePercentageBps": {
            "type": "number"
          },
          "feeAmount": {
            "type": "string"
          },
          "amountAfterFee": {
            "type": "string"
          },
          "status": {
            "enum": [
              "created",
              "tokens_sent",
              "tokens_received",
              "replaced_by_aggregated",
              "tokens_received_with_mismatch",
              "creating_safe_transaction",
              "creating_safe_transaction_unprocessable",
              "safe_transaction_created",
              "executing_safe_transaction",
              "safe_transaction_unprocessable",
              "safe_transaction_executed",
              "timeout",
              "mining_tokens_received_below_min_amount",
              "mining_incorrect_payment_id",
              "mining_incorrect_payment_id_and_amount"
            ],
            "type": "string"
          },
          "origin": {
            "enum": ["bridge", "mining"],
            "type": "string"
          },
          "isNotificationSent": {
            "type": "boolean"
          },
          "safeAddress": {
            "type": "string"
          },
          "safeTxHash": {
            "type": "string"
          },
          "safeNonce": {
            "type": "number"
          },
          "transactionHash": {
            "type": "string"
          },
          "tariTxTimestamp": {
            "type": "number"
          },
          "tariBlockHeight": {
            "type": "number"
          },
          "tariPaymentReference": {
            "type": "string"
          },
          "incomingPaymentId": {
            "type": "string"
          },
          "audits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WrapTokenAuditEntity"
            }
          },
          "transaction": {
            "$ref": "#/components/schemas/WrapTokenTransactionEntity"
          },
          "transactionId": {
            "type": "number"
          },
          "aggregatedTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WrapTokenTransactionEntity"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "error",
          "debug",
          "id",
          "paymentId",
          "from",
          "to",
          "tokenAmount",
          "feePercentageBps",
          "feeAmount",
          "amountAfterFee",
          "status",
          "origin",
          "isNotificationSent",
          "audits",
          "aggregatedTransactions",
          "createdAt",
          "updatedAt"
        ]
      },
      "WalletTransactionDTO": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string"
          },
          "timestamp": {
            "type": "number"
          },
          "blockHeight": {
            "type": "number"
          },
          "paymentReference": {
            "type": "string"
          },
          "paymentId": {
            "type": "string"
          }
        },
        "required": [
          "amount",
          "timestamp",
          "blockHeight",
          "paymentReference",
          "paymentId"
        ]
      },
      "TokensReceivedRequestDTO": {
        "type": "object",
        "properties": {
          "walletTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WalletTransactionDTO"
            }
          }
        },
        "required": ["walletTransactions"]
      },
      "BaseTransactionDTO": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string"
          }
        },
        "required": ["paymentId"]
      },
      "CreatingTransactionRequestDTO": {
        "type": "object",
        "properties": {
          "walletTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseTransactionDTO"
            }
          }
        },
        "required": ["walletTransactions"]
      },
      "TransactionCreatedDTO": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string"
          },
          "safeAddress": {
            "type": "string"
          },
          "safeTxHash": {
            "type": "string"
          },
          "safeNonce": {
            "type": "number"
          }
        },
        "required": ["paymentId", "safeTxHash", "safeNonce"]
      },
      "TransactionCreatedRequestDTO": {
        "type": "object",
        "properties": {
          "walletTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionCreatedDTO"
            }
          }
        },
        "required": ["walletTransactions"]
      },
      "ErrorUpdateDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "paymentId": {
            "type": "string"
          }
        },
        "required": ["error", "paymentId"]
      },
      "ErrorUpdateRequestDTO": {
        "type": "object",
        "properties": {
          "walletTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorUpdateDTO"
            }
          }
        },
        "required": ["walletTransactions"]
      },
      "ExecutingTransactionRequestDTO": {
        "type": "object",
        "properties": {
          "walletTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseTransactionDTO"
            }
          }
        },
        "required": ["walletTransactions"]
      },
      "TransactionExecutedDTO": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string"
          },
          "transactionHash": {
            "type": "string"
          }
        },
        "required": ["paymentId"]
      },
      "TransactionExecutedRequestDTO": {
        "type": "object",
        "properties": {
          "walletTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionExecutedDTO"
            }
          }
        },
        "required": ["walletTransactions"]
      },
      "MintHightTransactionReqDTO": {
        "type": "object",
        "properties": {
          "safeTxHash": {
            "type": "string"
          }
        },
        "required": ["safeTxHash"]
      },
      "UserUnwrappedTransactionDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["PENDING", "SUCCESS", "PROCESSING", "ERROR"]
          },
          "destinationAddress": {
            "type": "string"
          },
          "paymentId": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "amountAfterFee": {
            "type": "string"
          },
          "feeAmount": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "transactionHash": {
            "type": "string"
          }
        },
        "required": [
          "status",
          "destinationAddress",
          "paymentId",
          "amount",
          "amountAfterFee",
          "feeAmount",
          "createdAt",
          "transactionHash"
        ]
      },
      "GetUserUnwrappedTransactionsRespDTO": {
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserUnwrappedTransactionDTO"
            }
          }
        },
        "required": ["transactions"]
      },
      "GetManyTokensUnwrappedEntityResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokensUnwrappedEntity"
            }
          },
          "count": {
            "type": "number"
          },
          "total": {
            "type": "number"
          },
          "page": {
            "type": "number"
          },
          "pageCount": {
            "type": "number"
          }
        },
        "required": ["data", "count", "total", "page", "pageCount"]
      },
      "TokensUnwrappedAuditEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "paymentId": {
            "type": "string"
          },
          "fromStatus": {
            "type": "string",
            "enum": [
              "created",
              "created_unprocessable",
              "awaiting_confirmation",
              "awaiting_confirmation_unprocessable",
              "confirmed",
              "confirmed_awaiting_approval",
              "confirmed_unprocessable",
              "init_send_tokens",
              "sending_tokens",
              "sending_tokens_unprocessable",
              "tokens_sent"
            ]
          },
          "toStatus": {
            "type": "string",
            "enum": [
              "created",
              "created_unprocessable",
              "awaiting_confirmation",
              "awaiting_confirmation_unprocessable",
              "confirmed",
              "confirmed_awaiting_approval",
              "confirmed_unprocessable",
              "init_send_tokens",
              "sending_tokens",
              "sending_tokens_unprocessable",
              "tokens_sent"
            ]
          },
          "note": {
            "type": "object"
          },
          "transaction": {
            "$ref": "#/components/schemas/TokensUnwrappedEntity"
          },
          "transactionId": {
            "type": "number"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "paymentId",
          "transaction",
          "transactionId",
          "createdAt",
          "updatedAt"
        ]
      },
      "TokensUnwrappedEntity": {
        "type": "object",
        "properties": {
          "error": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "default": []
          },
          "id": {
            "type": "number"
          },
          "paymentId": {
            "type": "string"
          },
          "subgraphId": {
            "type": "string"
          },
          "nonce": {
            "type": "number"
          },
          "signature": {
            "type": "string"
          },
          "contractAddress": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "targetTariAddress": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "feePercentageBps": {
            "type": "number"
          },
          "feeAmount": {
            "type": "string"
          },
          "amountAfterFee": {
            "type": "string"
          },
          "blockHash": {
            "type": "string"
          },
          "blockNumber": {
            "type": "number"
          },
          "blockTimestamp": {
            "format": "date-time",
            "type": "string"
          },
          "transactionHash": {
            "type": "string"
          },
          "status": {
            "enum": [
              "created",
              "created_unprocessable",
              "awaiting_confirmation",
              "awaiting_confirmation_unprocessable",
              "confirmed",
              "confirmed_awaiting_approval",
              "confirmed_unprocessable",
              "init_send_tokens",
              "sending_tokens",
              "sending_tokens_unprocessable",
              "tokens_sent"
            ],
            "type": "string"
          },
          "isErrorNotificationSent": {
            "type": "boolean"
          },
          "temporaryTransactionId": {
            "type": "string"
          },
          "tariTxTimestamp": {
            "type": "number"
          },
          "tariBlockHeight": {
            "type": "number"
          },
          "tariPaymentReference": {
            "type": "string"
          },
          "audits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TokensUnwrappedAuditEntity"
            }
          },
          "approvingUser": {
            "$ref": "#/components/schemas/UserEntity"
          },
          "approvingUserId": {
            "type": "number"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "error",
          "id",
          "paymentId",
          "subgraphId",
          "nonce",
          "signature",
          "contractAddress",
          "from",
          "targetTariAddress",
          "amount",
          "feePercentageBps",
          "feeAmount",
          "amountAfterFee",
          "blockHash",
          "blockNumber",
          "blockTimestamp",
          "transactionHash",
          "status",
          "isErrorNotificationSent",
          "audits",
          "createdAt",
          "updatedAt"
        ]
      },
      "SettingsEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "default": 1
          },
          "wrapTokensServiceStatus": {
            "type": "string",
            "enum": ["online", "offline"]
          },
          "maxBatchSize": {
            "type": "number"
          },
          "maxBatchAgeMs": {
            "type": "number"
          },
          "batchAmountThreshold": {
            "type": "string"
          },
          "unwrapManualApprovalThreshold": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "wrapTokensServiceStatus",
          "maxBatchSize",
          "maxBatchAgeMs",
          "batchAmountThreshold",
          "unwrapManualApprovalThreshold",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateSettingReqDTO": {
        "type": "object",
        "properties": {
          "wrapTokensServiceStatus": {
            "type": "string",
            "enum": ["online", "offline"]
          },
          "maxBatchSize": {
            "type": "number",
            "minimum": 2,
            "maximum": 50
          },
          "maxBatchAgeMs": {
            "type": "number",
            "minimum": 60000
          },
          "batchAmountThreshold": {
            "type": "string"
          },
          "unwrapManualApprovalThreshold": {
            "type": "string"
          }
        },
        "required": [
          "wrapTokensServiceStatus",
          "maxBatchSize",
          "maxBatchAgeMs",
          "batchAmountThreshold",
          "unwrapManualApprovalThreshold"
        ]
      },
      "MineToExchangeConfigDTO": {
        "type": "object",
        "properties": {
          "toAddress": {
            "type": "string"
          }
        },
        "required": ["toAddress"]
      },
      "MineToExchangeConfigRespDTO": {
        "type": "object",
        "properties": {
          "walletAddress": {
            "type": "string"
          },
          "paymentId": {
            "type": "string"
          }
        },
        "required": ["walletAddress", "paymentId"]
      },
      "MiningTransactionDTO": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string"
          },
          "paymentId": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "paymentReference": {
            "type": "string"
          },
          "blockHeight": {
            "type": "number"
          },
          "timestamp": {
            "type": "number"
          }
        },
        "required": [
          "from",
          "amount",
          "paymentReference",
          "blockHeight",
          "timestamp"
        ]
      },
      "CreateMiningTransactionsDTO": {
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MiningTransactionDTO"
            }
          }
        },
        "required": ["transactions"]
      },
      "UpdateTokensUnwrappedStatusDTO": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string"
          }
        },
        "required": ["paymentId"]
      },
      "UpdateSendingTokensDTO": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string"
          },
          "temporaryTransactionId": {
            "type": "string"
          }
        },
        "required": ["paymentId", "temporaryTransactionId"]
      },
      "UpdateToTokensSentDTO": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string"
          },
          "tariTxTimestamp": {
            "type": "number"
          },
          "tariBlockHeight": {
            "type": "number"
          },
          "tariPaymentReference": {
            "type": "string"
          }
        },
        "required": [
          "paymentId",
          "tariTxTimestamp",
          "tariBlockHeight",
          "tariPaymentReference"
        ]
      },
      "TokensUnwrappedSetErrorDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "paymentId": {
            "type": "string"
          }
        },
        "required": ["error", "paymentId"]
      }
    }
  }
}
